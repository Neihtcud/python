/*
 * H·ªá Th·ªëng Qu·∫£n L√Ω D·ª± √Ån - Phi√™n b·∫£n c√≥ th·ªÉ nh·∫≠p d·ªØ li·ªáu
 * @author Admin
 */

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import java.util.Date;

// Data classes
class Project {
    String id, name, client, startDate, endDate, status, progress;
    
    public Project(String id, String name, String client, String startDate, String endDate, String status, String progress) {
        this.id = id;
        this.name = name;
        this.client = client;
        this.startDate = startDate;
        this.endDate = endDate;
        this.status = status;
        this.progress = progress;
    }
    
    public Object[] toArray() {
        return new Object[]{id, name, client, startDate, endDate, status, progress};
    }
}

class Task {
    String id, name, project, assignee, priority, dueDate, status;
    
    public Task(String id, String name, String project, String assignee, String priority, String dueDate, String status) {
        this.id = id;
        this.name = name;
        this.project = project;
        this.assignee = assignee;
        this.priority = priority;
        this.dueDate = dueDate;
        this.status = status;
    }
    
    public Object[] toArray() {
        return new Object[]{id, name, project, assignee, priority, dueDate, status};
    }
}

class Employee {
    String id, name, position, email, phone, department, status;
    
    public Employee(String id, String name, String position, String email, String phone, String department, String status) {
        this.id = id;
        this.name = name;
        this.position = position;
        this.email = email;
        this.phone = phone;
        this.department = department;
        this.status = status;
    }
    
    public Object[] toArray() {
        return new Object[]{id, name, position, email, phone, department, status};
    }
}

// Main Dashboard Panel
public class MainDashboard extends JFrame {
    private JPanel sidebarPanel;
    private JPanel contentPanel;
    private CardLayout contentLayout;
    private JLabel userLabel;
    private String currentUser = "Admin";
    
    // Data storage
    private ArrayList<Project> projects = new ArrayList<>();
    private ArrayList<Task> tasks = new ArrayList<>();
    private ArrayList<Employee> employees = new ArrayList<>();
    
    // Table models
    private DefaultTableModel projectTableModel;
    private DefaultTableModel taskTableModel;
    private DefaultTableModel employeeTableModel;
    
    // ID counters
    private int projectIdCounter = 1;
    private int taskIdCounter = 1;
    private int employeeIdCounter = 1;
    
    public MainDashboard() {
        initializeComponents();
        setupLayout();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setTitle("H·ªá Th·ªëng Qu·∫£n L√Ω D·ª± √Ån");
        setVisible(true);
    }
    
    private void initializeComponents() {
        createSidebar();
        createContentPanel();
    }
    
    private void createSidebar() {
        sidebarPanel = new JPanel();
        sidebarPanel.setLayout(new BoxLayout(sidebarPanel, BoxLayout.Y_AXIS));
        sidebarPanel.setBackground(new Color(52, 73, 94));
        sidebarPanel.setPreferredSize(new Dimension(250, 0));
        
        // Header
        JPanel headerPanel = new JPanel();
        headerPanel.setBackground(new Color(44, 62, 80));
        headerPanel.setMaximumSize(new Dimension(250, 80));
        headerPanel.setLayout(new BorderLayout());
        
        JLabel titleLabel = new JLabel("QU·∫¢N L√ù D·ª∞ √ÅN");
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 16));
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        headerPanel.add(titleLabel, BorderLayout.CENTER);
        
        // User info
        JPanel userPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        userPanel.setBackground(new Color(52, 73, 94));
        userPanel.setMaximumSize(new Dimension(250, 40));
        
        userLabel = new JLabel("üë§ " + currentUser);
        userLabel.setForeground(Color.WHITE);
        userLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        userPanel.add(userLabel);
        
        // Menu items
        sidebarPanel.add(headerPanel);
        sidebarPanel.add(userPanel);
        sidebarPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        
        // Navigation buttons
        addMenuButton("üè† Trang Ch·ªß", "HOME");
        addMenuButton("üìã Qu·∫£n L√Ω D·ª± √Ån", "PROJECTS");
        addMenuButton("‚úÖ C√¥ng Vi·ªác", "TASKS");
        addMenuButton("üë• Nh√¢n Vi√™n", "EMPLOYEES");
        addMenuButton("üìä B√°o C√°o", "REPORTS");
        addMenuButton("üìà Th·ªëng K√™", "STATISTICS");
        addMenuButton("‚öôÔ∏è C√†i ƒê·∫∑t", "SETTINGS");
        
        sidebarPanel.add(Box.createVerticalGlue());
        
        // Logout button
        JButton logoutBtn = new JButton("üö™ ƒêƒÉng Xu·∫•t");
        logoutBtn.setBackground(new Color(231, 76, 60));
        logoutBtn.setForeground(Color.WHITE);
        logoutBtn.setBorder(new EmptyBorder(10, 20, 10, 20));
        logoutBtn.setMaximumSize(new Dimension(220, 40));
        logoutBtn.setAlignmentX(Component.CENTER_ALIGNMENT);
        logoutBtn.setFocusPainted(false);
        logoutBtn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        logoutBtn.addActionListener(e -> System.exit(0));
        sidebarPanel.add(logoutBtn);
        sidebarPanel.add(Box.createRigidArea(new Dimension(0, 20)));
    }
    
    private void addMenuButton(String text, String panelName) {
        JButton button = new JButton(text);
        button.setBackground(new Color(52, 73, 94));
        button.setForeground(Color.WHITE);
        button.setBorder(new EmptyBorder(12, 20, 12, 20));
        button.setMaximumSize(new Dimension(230, 45));
        button.setAlignmentX(Component.LEFT_ALIGNMENT);
        button.setHorizontalAlignment(SwingConstants.LEFT);
        button.setFocusPainted(false);
        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(41, 128, 185));
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(52, 73, 94));
            }
        });
        
        button.addActionListener(e -> {
            contentLayout.show(contentPanel, panelName);
            updateSelectedButton(button);
        });
        
        sidebarPanel.add(button);
        sidebarPanel.add(Box.createRigidArea(new Dimension(0, 5)));
    }
    
    private void updateSelectedButton(JButton selectedButton) {
        for (Component comp : sidebarPanel.getComponents()) {
            if (comp instanceof JButton && !comp.equals(sidebarPanel.getComponent(sidebarPanel.getComponentCount()-2))) {
                comp.setBackground(new Color(52, 73, 94));
            }
        }
        selectedButton.setBackground(new Color(41, 128, 185));
    }
    
    private void createContentPanel() {
        contentLayout = new CardLayout();
        contentPanel = new JPanel(contentLayout);
        
        contentPanel.add(createHomePanel(), "HOME");
        contentPanel.add(createProjectsPanel(), "PROJECTS");
        contentPanel.add(createTasksPanel(), "TASKS");
        contentPanel.add(createEmployeesPanel(), "EMPLOYEES");
        contentPanel.add(createReportsPanel(), "REPORTS");
        contentPanel.add(createStatisticsPanel(), "STATISTICS");
        contentPanel.add(createSettingsPanel(), "SETTINGS");
        
        contentLayout.show(contentPanel, "HOME");
    }
    
    private JPanel createHomePanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        
        // Header
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(236, 240, 241));
        headerPanel.setBorder(new EmptyBorder(20, 30, 20, 30));
        
        JLabel titleLabel = new JLabel("Dashboard - T·ªïng Quan H·ªá Th·ªëng");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        titleLabel.setForeground(new Color(52, 73, 94));
        headerPanel.add(titleLabel, BorderLayout.WEST);
        
        JLabel dateLabel = new JLabel(new SimpleDateFormat("dd/MM/yyyy HH:mm").format(new Date()));
        dateLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        dateLabel.setForeground(Color.GRAY);
        headerPanel.add(dateLabel, BorderLayout.EAST);
        
        // Statistics cards
        JPanel statsPanel = new JPanel(new GridLayout(1, 4, 20, 0));
        statsPanel.setBorder(new EmptyBorder(30, 30, 30, 30));
        statsPanel.setBackground(Color.WHITE);
        
        statsPanel.add(createStatCard("üìã T·ªïng D·ª± √Ån", String.valueOf(projects.size()), new Color(52, 152, 219)));
        statsPanel.add(createStatCard("‚úÖ C√¥ng Vi·ªác", String.valueOf(tasks.size()), new Color(46, 204, 113)));
        statsPanel.add(createStatCard("üë• Nh√¢n Vi√™n", String.valueOf(employees.size()), new Color(155, 89, 182)));
        
        // Count overdue tasks
        int overdueTasks = 0;
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Date today = new Date();
        for (Task task : tasks) {
            try {
                Date dueDate = sdf.parse(task.dueDate);
                if (dueDate.before(today) && !task.status.equals("Ho√†n th√†nh")) {
                    overdueTasks++;
                }
            } catch (Exception e) {
                // Ignore parsing error
            }
        }
        statsPanel.add(createStatCard("‚è∞ Qu√° H·∫°n", String.valueOf(overdueTasks), new Color(231, 76, 60)));
        
        // Recent activities placeholder
        JPanel recentPanel = new JPanel(new BorderLayout());
        recentPanel.setBorder(BorderFactory.createTitledBorder("Ho·∫°t ƒê·ªông G·∫ßn ƒê√¢y"));
        recentPanel.setBackground(Color.WHITE);
        
        JLabel noActivityLabel = new JLabel("Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o", SwingConstants.CENTER);
        noActivityLabel.setFont(new Font("Arial", Font.ITALIC, 14));
        noActivityLabel.setForeground(Color.GRAY);
        noActivityLabel.setBorder(new EmptyBorder(50, 0, 50, 0));
        recentPanel.add(noActivityLabel, BorderLayout.CENTER);
        
        panel.add(headerPanel, BorderLayout.NORTH);
        
        JPanel centerPanel = new JPanel(new BorderLayout());
        centerPanel.add(statsPanel, BorderLayout.NORTH);
        centerPanel.add(recentPanel, BorderLayout.CENTER);
        panel.add(centerPanel, BorderLayout.CENTER);
        
        return panel;
    }
    
    private JPanel createStatCard(String title, String value, Color color) {
        JPanel card = new JPanel();
        card.setLayout(new BoxLayout(card, BoxLayout.Y_AXIS));
        card.setBackground(color);
        card.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        JLabel titleLabel = new JLabel(title);
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        JLabel valueLabel = new JLabel(value);
        valueLabel.setForeground(Color.WHITE);
        valueLabel.setFont(new Font("Arial", Font.BOLD, 32));
        valueLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        card.add(titleLabel);
        card.add(Box.createRigidArea(new Dimension(0, 10)));
        card.add(valueLabel);
        
        return card;
    }
    
    private JPanel createProjectsPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        
        // Header with toolbar
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        headerPanel.setBackground(Color.WHITE);
        
        JLabel titleLabel = new JLabel("Qu·∫£n L√Ω D·ª± √Ån");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        headerPanel.add(titleLabel, BorderLayout.WEST);
        
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setBackground(Color.WHITE);
        
        JButton addProjectBtn = new JButton("+ Th√™m D·ª± √Ån");
        addProjectBtn.setBackground(new Color(46, 204, 113));
        addProjectBtn.setForeground(Color.WHITE);
        addProjectBtn.setBorder(new EmptyBorder(8, 15, 8, 15));
        addProjectBtn.setFocusPainted(false);
        addProjectBtn.addActionListener(e -> showAddProjectDialog());
        
        JButton editBtn = new JButton("‚úèÔ∏è S·ª≠a");
        editBtn.setBackground(new Color(52, 152, 219));
        editBtn.setForeground(Color.WHITE);
        editBtn.setBorder(new EmptyBorder(8, 15, 8, 15));
        editBtn.setFocusPainted(false);
        
        JButton deleteBtn = new JButton("üóëÔ∏è X√≥a");
        deleteBtn.setBackground(new Color(231, 76, 60));
        deleteBtn.setForeground(Color.WHITE);
        deleteBtn.setBorder(new EmptyBorder(8, 15, 8, 15));
        deleteBtn.setFocusPainted(false);
        
        buttonPanel.add(addProjectBtn);
        buttonPanel.add(editBtn);
        buttonPanel.add(deleteBtn);
        headerPanel.add(buttonPanel, BorderLayout.EAST);
        
        // Projects table
        String[] columns = {"ID", "T√™n D·ª± √Ån", "Kh√°ch H√†ng", "Ng√†y B·∫Øt ƒê·∫ßu", "Ng√†y K·∫øt Th√∫c", "Tr·∫°ng Th√°i", "Ti·∫øn ƒê·ªô (%)"};
        projectTableModel = new DefaultTableModel(columns, 0);
        
        JTable projectTable = new JTable(projectTableModel);
        projectTable.setRowHeight(35);
        projectTable.getTableHeader().setBackground(new Color(52, 73, 94));
        projectTable.getTableHeader().setForeground(Color.WHITE);
        projectTable.getTableHeader().setFont(new Font("Arial", Font.BOLD, 12));
        
        JScrollPane scrollPane = new JScrollPane(projectTable);
        scrollPane.setBorder(new EmptyBorder(0, 20, 20, 20));
        
        panel.add(headerPanel, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }
    
    private void showAddProjectDialog() {
        JDialog dialog = new JDialog(this, "Th√™m D·ª± √Ån M·ªõi", true);
        dialog.setSize(500, 400);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.anchor = GridBagConstraints.WEST;
        
        // Form fields
        JTextField nameField = new JTextField(20);
        JTextField clientField = new JTextField(20);
        JTextField startDateField = new JTextField(20);
        JTextField endDateField = new JTextField(20);
        JComboBox<String> statusCombo = new JComboBox<>(new String[]{"M·ªõi t·∫°o", "ƒêang th·ª±c hi·ªán", "T·∫°m d·ª´ng", "Ho√†n th√†nh"});
        JTextField progressField = new JTextField(20);
        
        // Add components
        gbc.gridx = 0; gbc.gridy = 0;
        panel.add(new JLabel("T√™n D·ª± √Ån:"), gbc);
        gbc.gridx = 1;
        panel.add(nameField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        panel.add(new JLabel("Kh√°ch H√†ng:"), gbc);
        gbc.gridx = 1;
        panel.add(clientField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        panel.add(new JLabel("Ng√†y B·∫Øt ƒê·∫ßu (dd/MM/yyyy):"), gbc);
        gbc.gridx = 1;
        panel.add(startDateField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        panel.add(new JLabel("Ng√†y K·∫øt Th√∫c (dd/MM/yyyy):"), gbc);
        gbc.gridx = 1;
        panel.add(endDateField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 4;
        panel.add(new JLabel("Tr·∫°ng Th√°i:"), gbc);
        gbc.gridx = 1;
        panel.add(statusCombo, gbc);
        
        gbc.gridx = 0; gbc.gridy = 5;
        panel.add(new JLabel("Ti·∫øn ƒê·ªô (%):"), gbc);
        gbc.gridx = 1;
        panel.add(progressField, gbc);
        
        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton saveBtn = new JButton("L∆∞u");
        JButton cancelBtn = new JButton("H·ªßy");
        
        saveBtn.addActionListener(e -> {
            try {
                String id = "P" + String.format("%03d", projectIdCounter++);
                String name = nameField.getText().trim();
                String client = clientField.getText().trim();
                String startDate = startDateField.getText().trim();
                String endDate = endDateField.getText().trim();
                String status = (String) statusCombo.getSelectedItem();
                String progress = progressField.getText().trim() + "%";
                
                if (name.isEmpty() || client.isEmpty() || startDate.isEmpty() || endDate.isEmpty()) {
                    JOptionPane.showMessageDialog(dialog, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                Project project = new Project(id, name, client, startDate, endDate, status, progress);
                projects.add(project);
                projectTableModel.addRow(project.toArray());
                
                dialog.dispose();
                JOptionPane.showMessageDialog(this, "Th√™m d·ª± √°n th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                
                // Refresh home panel
                refreshHomePanel();
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(dialog, "C√≥ l·ªói x·∫£y ra: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        });
        
        cancelBtn.addActionListener(e -> dialog.dispose());
        
        buttonPanel.add(saveBtn);
        buttonPanel.add(cancelBtn);
        
        gbc.gridx = 0; gbc.gridy = 6;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(buttonPanel, gbc);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private JPanel createTasksPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        
        // Header
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        headerPanel.setBackground(Color.WHITE);
        
        JLabel titleLabel = new JLabel("Qu·∫£n L√Ω C√¥ng Vi·ªác");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        headerPanel.add(titleLabel, BorderLayout.WEST);
        
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setBackground(Color.WHITE);
        
        JButton addTaskBtn = new JButton("+ Th√™m C√¥ng Vi·ªác");
        addTaskBtn.setBackground(new Color(46, 204, 113));
        addTaskBtn.setForeground(Color.WHITE);
        addTaskBtn.setBorder(new EmptyBorder(8, 15, 8, 15));
        addTaskBtn.setFocusPainted(false);
        addTaskBtn.addActionListener(e -> showAddTaskDialog());
        
        buttonPanel.add(addTaskBtn);
        headerPanel.add(buttonPanel, BorderLayout.EAST);
        
        // Tasks table
        String[] columns = {"ID", "T√™n C√¥ng Vi·ªác", "D·ª± √Ån", "Ng∆∞·ªùi Th·ª±c Hi·ªán", "ƒê·ªô ∆Øu Ti√™n", "Ng√†y H·∫øt H·∫°n", "Tr·∫°ng Th√°i"};
        taskTableModel = new DefaultTableModel(columns, 0);
        
        JTable taskTable = new JTable(taskTableModel);
        taskTable.setRowHeight(35);
        taskTable.getTableHeader().setBackground(new Color(52, 73, 94));
        taskTable.getTableHeader().setForeground(Color.WHITE);
        taskTable.getTableHeader().setFont(new Font("Arial", Font.BOLD, 12));
        
        JScrollPane scrollPane = new JScrollPane(taskTable);
        scrollPane.setBorder(new EmptyBorder(0, 20, 20, 20));
        
        panel.add(headerPanel, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }
    
    private void showAddTaskDialog() {
        JDialog dialog = new JDialog(this, "Th√™m C√¥ng Vi·ªác M·ªõi", true);
        dialog.setSize(500, 450);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.anchor = GridBagConstraints.WEST;
        
        // Form fields
        JTextField nameField = new JTextField(20);
        JComboBox<String> projectCombo = new JComboBox<>();
        for (Project p : projects) {
            projectCombo.addItem(p.name);
        }
        
        JComboBox<String> assigneeCombo = new JComboBox<>();
        for (Employee e : employees) {
            assigneeCombo.addItem(e.name);
        }
        
        JComboBox<String> priorityCombo = new JComboBox<>(new String[]{"Th·∫•p", "Trung b√¨nh", "Cao", "R·∫•t cao"});
        JTextField dueDateField = new JTextField(20);
        JComboBox<String> statusCombo = new JComboBox<>(new String[]{"Ch∆∞a b·∫Øt ƒë·∫ßu", "ƒêang th·ª±c hi·ªán", "Ho√†n th√†nh"});
        
        // Add components
        gbc.gridx = 0; gbc.gridy = 0;
        panel.add(new JLabel("T√™n C√¥ng Vi·ªác:"), gbc);
        gbc.gridx = 1;
        panel.add(nameField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        panel.add(new JLabel("D·ª± √Ån:"), gbc);
        gbc.gridx = 1;
        panel.add(projectCombo, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        panel.add(new JLabel("Ng∆∞·ªùi Th·ª±c Hi·ªán:"), gbc);
        gbc.gridx = 1;
        panel.add(assigneeCombo, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        panel.add(new JLabel("ƒê·ªô ∆Øu Ti√™n:"), gbc);
        gbc.gridx = 1;
        panel.add(priorityCombo, gbc);
        
        gbc.gridx = 0; gbc.gridy = 4;
        panel.add(new JLabel("Ng√†y H·∫øt H·∫°n (dd/MM/yyyy):"), gbc);
        gbc.gridx = 1;
        panel.add(dueDateField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 5;
        panel.add(new JLabel("Tr·∫°ng Th√°i:"), gbc);
        gbc.gridx = 1;
        panel.add(statusCombo, gbc);
        
        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton saveBtn = new JButton("L∆∞u");
        JButton cancelBtn = new JButton("H·ªßy");
        
        saveBtn.addActionListener(e -> {
            try {
                String id = "T" + String.format("%03d", taskIdCounter++);
                String name = nameField.getText().trim();
                String project = (String) projectCombo.getSelectedItem();
                String assignee = (String) assigneeCombo.getSelectedItem();
                String priority = (String) priorityCombo.getSelectedItem();
                String dueDate = dueDateField.getText().trim();
                String status = (String) statusCombo.getSelectedItem();
                
                if (name.isEmpty() || dueDate.isEmpty()) {
                    JOptionPane.showMessageDialog(dialog, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                Task task = new Task(id, name, project, assignee, priority, dueDate, status);
                tasks.add(task);
                taskTableModel.addRow(task.toArray());
                
                dialog.dispose();
                JOptionPane.showMessageDialog(this, "Th√™m c√¥ng vi·ªác th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                
                refreshHomePanel();
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(dialog, "C√≥ l·ªói x·∫£y ra: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        });
        
        cancelBtn.addActionListener(e -> dialog.dispose());
        
        buttonPanel.add(saveBtn);
        buttonPanel.add(cancelBtn);
        
        gbc.gridx = 0; gbc.gridy = 6;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(buttonPanel, gbc);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private JPanel createEmployeesPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        
        // Header
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        headerPanel.setBackground(Color.WHITE);
        
        JLabel titleLabel = new JLabel("Qu·∫£n L√Ω Nh√¢n Vi√™n");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        headerPanel.add(titleLabel, BorderLayout.WEST);
        
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setBackground(Color.WHITE);
        
        JButton addEmployeeBtn = new JButton("+ Th√™m Nh√¢n Vi√™n");
        addEmployeeBtn.setBackground(new Color(46, 204, 113));
        addEmployeeBtn.setForeground(Color.WHITE);
        addEmployeeBtn.setBorder(new EmptyBorder(8, 15, 8, 15));
        addEmployeeBtn.setFocusPainted(false);
        addEmployeeBtn.addActionListener(e -> showAddEmployeeDialog());
        
        buttonPanel.add(addEmployeeBtn);
        headerPanel.add(buttonPanel, BorderLayout.EAST);
        
        // Employees table
        String[] columns = {"ID", "H·ªç T√™n", "Ch·ª©c V·ª•", "Email", "ƒêi·ªán Tho·∫°i", "Ph√≤ng Ban", "Tr·∫°ng Th√°i"};
        employeeTableModel = new DefaultTableModel(columns, 0);
        
        JTable employeeTable = new JTable(employeeTableModel);
        employeeTable.setRowHeight(35);
        employeeTable.getTableHeader().setBackground(new Color(52, 73, 94));
        employeeTable.getTableHeader().setForeground(Color.WHITE);
        employeeTable.getTableHeader().setFont(new Font("Arial", Font.BOLD, 12));
        
        JScrollPane scrollPane = new JScrollPane(employeeTable);
        scrollPane.setBorder(new EmptyBorder(0, 20, 20, 20));
        
        panel.add(headerPanel, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }
    
    private void showAddEmployeeDialog() {
        JDialog dialog = new JDialog(this, "Th√™m Nh√¢n Vi√™n M·ªõi", true);
        dialog.setSize(500, 500);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.anchor = GridBagConstraints.WEST;
        
        // Form fields
        JTextField nameField = new JTextField(20);
        JTextField positionField = new JTextField(20);
        JTextField emailField = new JTextField(20);
        JTextField phoneField = new JTextField(20);
        JComboBox<String> departmentCombo = new JComboBox<>(new String[]{"IT", "Marketing", "T√†i ch√≠nh", "Nh√¢n s·ª±", "Kinh doanh", "V·∫≠n h√†nh"});
        JComboBox<String> statusCombo = new JComboBox<>(new String[]{"ƒêang l√†m vi·ªác", "Ngh·ªâ ph√©p", "Ngh·ªâ vi·ªác"});
        
        // Add components
        gbc.gridx = 0; gbc.gridy = 0;
        panel.add(new JLabel("H·ªç T√™n:"), gbc);
        gbc.gridx = 1;
        panel.add(nameField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        panel.add(new JLabel("Ch·ª©c V·ª•:"), gbc);
        gbc.gridx = 1;
        panel.add(positionField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        panel.add(new JLabel("Email:"), gbc);
        gbc.gridx = 1;
        panel.add(emailField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        panel.add(new JLabel("ƒêi·ªán Tho·∫°i:"), gbc);
        gbc.gridx = 1;
        panel.add(phoneField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 4;
        panel.add(new JLabel("Ph√≤ng Ban:"), gbc);
        gbc.gridx = 1;
        panel.add(departmentCombo, gbc);
        
        gbc.gridx = 0; gbc.gridy = 5;
        panel.add(new JLabel("Tr·∫°ng Th√°i:"), gbc);
        gbc.gridx = 1;
        panel.add(statusCombo, gbc);
        
        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton saveBtn = new JButton("L∆∞u");
        JButton cancelBtn = new JButton("H·ªßy");
        
        saveBtn.addActionListener(e -> {
            try {
                String id = "E" + String.format("%03d", employeeIdCounter++);
                String name = nameField.getText().trim();
                String position = positionField.getText().trim();
                String email = emailField.getText().trim();
                String phone = phoneField.getText().trim();
                String department = (String) departmentCombo.getSelectedItem();
                String status = (String) statusCombo.getSelectedItem();
                
                if (name.isEmpty() || position.isEmpty() || email.isEmpty()) {
                    JOptionPane.showMessageDialog(dialog, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                Employee employee = new Employee(id, name, position, email, phone, department, status);
                employees.add(employee);
                employeeTableModel.addRow(employee.toArray());
                
                dialog.dispose();
                JOptionPane.showMessageDialog(this, "Th√™m nh√¢n vi√™n th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                
                refreshHomePanel();
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(dialog, "C√≥ l·ªói x·∫£y ra: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        });
        
        cancelBtn.addActionListener(e -> dialog.dispose());
        
        buttonPanel.add(saveBtn);
        buttonPanel.add(cancelBtn);
        
        gbc.gridx = 0; gbc.gridy = 6;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(buttonPanel, gbc);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private JPanel createReportsPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        headerPanel.setBackground(Color.WHITE);
        
        JLabel titleLabel = new JLabel("B√°o C√°o H·ªá Th·ªëng");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        headerPanel.add(titleLabel, BorderLayout.WEST);
        
        // Report content
        JPanel contentPanel = new JPanel(new GridLayout(2, 2, 20, 20));
        contentPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        contentPanel.setBackground(Color.WHITE);
        
        // Project Status Report
        JPanel projectReportPanel = new JPanel(new BorderLayout());
        projectReportPanel.setBorder(BorderFactory.createTitledBorder("B√°o C√°o Tr·∫°ng Th√°i D·ª± √Ån"));
        projectReportPanel.setBackground(Color.WHITE);
        
        JTextArea projectReport = new JTextArea();
        projectReport.setEditable(false);
        projectReport.setBackground(new Color(248, 249, 250));
        projectReport.setBorder(new EmptyBorder(10, 10, 10, 10));
        
        StringBuilder projectReportText = new StringBuilder();
        projectReportText.append("T·ªîNG QUAN D·ª∞ √ÅN:\n");
        projectReportText.append("- T·ªïng s·ªë d·ª± √°n: ").append(projects.size()).append("\n");
        
        int newProjects = 0, inProgressProjects = 0, pausedProjects = 0, completedProjects = 0;
        for (Project p : projects) {
            switch (p.status) {
                case "M·ªõi t·∫°o": newProjects++; break;
                case "ƒêang th·ª±c hi·ªán": inProgressProjects++; break;
                case "T·∫°m d·ª´ng": pausedProjects++; break;
                case "Ho√†n th√†nh": completedProjects++; break;
            }
        }
        
        projectReportText.append("- D·ª± √°n m·ªõi: ").append(newProjects).append("\n");
        projectReportText.append("- ƒêang th·ª±c hi·ªán: ").append(inProgressProjects).append("\n");
        projectReportText.append("- T·∫°m d·ª´ng: ").append(pausedProjects).append("\n");
        projectReportText.append("- Ho√†n th√†nh: ").append(completedProjects).append("\n");
        
        projectReport.setText(projectReportText.toString());
        projectReportPanel.add(new JScrollPane(projectReport), BorderLayout.CENTER);
        
        // Task Status Report
        JPanel taskReportPanel = new JPanel(new BorderLayout());
        taskReportPanel.setBorder(BorderFactory.createTitledBorder("B√°o C√°o C√¥ng Vi·ªác"));
        taskReportPanel.setBackground(Color.WHITE);
        
        JTextArea taskReport = new JTextArea();
        taskReport.setEditable(false);
        taskReport.setBackground(new Color(248, 249, 250));
        taskReport.setBorder(new EmptyBorder(10, 10, 10, 10));
        
        StringBuilder taskReportText = new StringBuilder();
        taskReportText.append("T·ªîNG QUAN C√îNG VI·ªÜC:\n");
        taskReportText.append("- T·ªïng s·ªë c√¥ng vi·ªác: ").append(tasks.size()).append("\n");
        
        int notStartedTasks = 0, inProgressTasks = 0, completedTasks = 0;
        for (Task t : tasks) {
            switch (t.status) {
                case "Ch∆∞a b·∫Øt ƒë·∫ßu": notStartedTasks++; break;
                case "ƒêang th·ª±c hi·ªán": inProgressTasks++; break;
                case "Ho√†n th√†nh": completedTasks++; break;
            }
        }
        
        taskReportText.append("- Ch∆∞a b·∫Øt ƒë·∫ßu: ").append(notStartedTasks).append("\n");
        taskReportText.append("- ƒêang th·ª±c hi·ªán: ").append(inProgressTasks).append("\n");
        taskReportText.append("- Ho√†n th√†nh: ").append(completedTasks).append("\n");
        
        taskReport.setText(taskReportText.toString());
        taskReportPanel.add(new JScrollPane(taskReport), BorderLayout.CENTER);
        
        // Employee Report
        JPanel employeeReportPanel = new JPanel(new BorderLayout());
        employeeReportPanel.setBorder(BorderFactory.createTitledBorder("B√°o C√°o Nh√¢n Vi√™n"));
        employeeReportPanel.setBackground(Color.WHITE);
        
        JTextArea employeeReport = new JTextArea();
        employeeReport.setEditable(false);
        employeeReport.setBackground(new Color(248, 249, 250));
        employeeReport.setBorder(new EmptyBorder(10, 10, 10, 10));
        
        StringBuilder employeeReportText = new StringBuilder();
        employeeReportText.append("T·ªîNG QUAN NH√ÇN VI√äN:\n");
        employeeReportText.append("- T·ªïng s·ªë nh√¢n vi√™n: ").append(employees.size()).append("\n");
        
        int activeEmployees = 0, onLeaveEmployees = 0, inactiveEmployees = 0;
        for (Employee emp : employees) {
            switch (emp.status) {
                case "ƒêang l√†m vi·ªác": activeEmployees++; break;
                case "Ngh·ªâ ph√©p": onLeaveEmployees++; break;
                case "Ngh·ªâ vi·ªác": inactiveEmployees++; break;
            }
        }
        
        employeeReportText.append("- ƒêang l√†m vi·ªác: ").append(activeEmployees).append("\n");
        employeeReportText.append("- Ngh·ªâ ph√©p: ").append(onLeaveEmployees).append("\n");
        employeeReportText.append("- Ngh·ªâ vi·ªác: ").append(inactiveEmployees).append("\n");
        
        employeeReport.setText(employeeReportText.toString());
        employeeReportPanel.add(new JScrollPane(employeeReport), BorderLayout.CENTER);
        
        // Export Button Panel
        JPanel exportPanel = new JPanel(new FlowLayout());
        exportPanel.setBackground(Color.WHITE);
        
        JButton exportBtn = new JButton("üìÑ Xu·∫•t B√°o C√°o");
        exportBtn.setBackground(new Color(52, 152, 219));
        exportBtn.setForeground(Color.WHITE);
        exportBtn.setBorder(new EmptyBorder(10, 20, 10, 20));
        exportBtn.setFocusPainted(false);
        exportBtn.addActionListener(e -> {
            JOptionPane.showMessageDialog(this, "Ch·ª©c nƒÉng xu·∫•t b√°o c√°o s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo!", 
                                        "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
        });
        
        exportPanel.add(exportBtn);
        
        contentPanel.add(projectReportPanel);
        contentPanel.add(taskReportPanel);
        contentPanel.add(employeeReportPanel);
        contentPanel.add(exportPanel);
        
        panel.add(headerPanel, BorderLayout.NORTH);
        panel.add(contentPanel, BorderLayout.CENTER);
        
        return panel;
    }
    
    private JPanel createStatisticsPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        headerPanel.setBackground(Color.WHITE);
        
        JLabel titleLabel = new JLabel("Th·ªëng K√™ H·ªá Th·ªëng");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        headerPanel.add(titleLabel, BorderLayout.WEST);
        
        // Statistics content
        JPanel statsPanel = new JPanel(new GridLayout(3, 1, 0, 20));
        statsPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        statsPanel.setBackground(Color.WHITE);
        
        // Project Statistics
        JPanel projectStatsPanel = new JPanel(new BorderLayout());
        projectStatsPanel.setBorder(BorderFactory.createTitledBorder("Th·ªëng K√™ D·ª± √Ån"));
        projectStatsPanel.setBackground(Color.WHITE);
        
        JPanel projectStatsGrid = new JPanel(new GridLayout(2, 2, 10, 10));
        projectStatsGrid.setBackground(Color.WHITE);
        projectStatsGrid.setBorder(new EmptyBorder(10, 10, 10, 10));
        
        // Calculate project completion rate
        int totalProjects = projects.size();
        int completedProjects = 0;
        for (Project p : projects) {
            if ("Ho√†n th√†nh".equals(p.status)) {
                completedProjects++;
            }
        }
        double completionRate = totalProjects > 0 ? (double) completedProjects / totalProjects * 100 : 0;
        
        projectStatsGrid.add(createStatLabel("T·ªïng d·ª± √°n:", String.valueOf(totalProjects)));
        projectStatsGrid.add(createStatLabel("ƒê√£ ho√†n th√†nh:", String.valueOf(completedProjects)));
        projectStatsGrid.add(createStatLabel("T·ª∑ l·ªá ho√†n th√†nh:", String.format("%.1f%%", completionRate)));
        projectStatsGrid.add(createStatLabel("ƒêang th·ª±c hi·ªán:", String.valueOf(totalProjects - completedProjects)));
        
        projectStatsPanel.add(projectStatsGrid, BorderLayout.CENTER);
        
        // Task Statistics
        JPanel taskStatsPanel = new JPanel(new BorderLayout());
        taskStatsPanel.setBorder(BorderFactory.createTitledBorder("Th·ªëng K√™ C√¥ng Vi·ªác"));
        taskStatsPanel.setBackground(Color.WHITE);
        
        JPanel taskStatsGrid = new JPanel(new GridLayout(2, 2, 10, 10));
        taskStatsGrid.setBackground(Color.WHITE);
        taskStatsGrid.setBorder(new EmptyBorder(10, 10, 10, 10));
        
        int totalTasks = tasks.size();
        int completedTasks = 0;
        int overdueTasks = 0;
        
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Date today = new Date();
        
        for (Task t : tasks) {
            if ("Ho√†n th√†nh".equals(t.status)) {
                completedTasks++;
            }
            try {
                Date dueDate = sdf.parse(t.dueDate);
                if (dueDate.before(today) && !"Ho√†n th√†nh".equals(t.status)) {
                    overdueTasks++;
                }
            } catch (Exception e) {
                // Ignore parsing error
            }
        }
        
        taskStatsGrid.add(createStatLabel("T·ªïng c√¥ng vi·ªác:", String.valueOf(totalTasks)));
        taskStatsGrid.add(createStatLabel("ƒê√£ ho√†n th√†nh:", String.valueOf(completedTasks)));
        taskStatsGrid.add(createStatLabel("Qu√° h·∫°n:", String.valueOf(overdueTasks)));
        taskStatsGrid.add(createStatLabel("ƒêang th·ª±c hi·ªán:", String.valueOf(totalTasks - completedTasks)));
        
        taskStatsPanel.add(taskStatsGrid, BorderLayout.CENTER);
        
        // Employee Statistics
        JPanel employeeStatsPanel = new JPanel(new BorderLayout());
        employeeStatsPanel.setBorder(BorderFactory.createTitledBorder("Th·ªëng K√™ Nh√¢n Vi√™n"));
        employeeStatsPanel.setBackground(Color.WHITE);
        
        JPanel employeeStatsGrid = new JPanel(new GridLayout(2, 2, 10, 10));
        employeeStatsGrid.setBackground(Color.WHITE);
        employeeStatsGrid.setBorder(new EmptyBorder(10, 10, 10, 10));
        
        int totalEmployees = employees.size();
        int activeEmployees = 0;
        for (Employee emp : employees) {
            if ("ƒêang l√†m vi·ªác".equals(emp.status)) {
                activeEmployees++;
            }
        }
        
        employeeStatsGrid.add(createStatLabel("T·ªïng nh√¢n vi√™n:", String.valueOf(totalEmployees)));
        employeeStatsGrid.add(createStatLabel("ƒêang l√†m vi·ªác:", String.valueOf(activeEmployees)));
        employeeStatsGrid.add(createStatLabel("T·ª∑ l·ªá ho·∫°t ƒë·ªông:", totalEmployees > 0 ? 
                                            String.format("%.1f%%", (double) activeEmployees / totalEmployees * 100) : "0%"));
        employeeStatsGrid.add(createStatLabel("Ngh·ªâ/Kh√¥ng ho·∫°t ƒë·ªông:", String.valueOf(totalEmployees - activeEmployees)));
        
        employeeStatsPanel.add(employeeStatsGrid, BorderLayout.CENTER);
        
        statsPanel.add(projectStatsPanel);
        statsPanel.add(taskStatsPanel);
        statsPanel.add(employeeStatsPanel);
        
        panel.add(headerPanel, BorderLayout.NORTH);
        panel.add(statsPanel, BorderLayout.CENTER);
        
        return panel;
    }
    
    private JPanel createStatLabel(String label, String value) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        
        JLabel labelComponent = new JLabel(label);
        labelComponent.setFont(new Font("Arial", Font.PLAIN, 12));
        
        JLabel valueComponent = new JLabel(value);
        valueComponent.setFont(new Font("Arial", Font.BOLD, 14));
        valueComponent.setForeground(new Color(52, 152, 219));
        
        panel.add(labelComponent, BorderLayout.WEST);
        panel.add(valueComponent, BorderLayout.EAST);
        
        return panel;
    }
    
    private JPanel createSettingsPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        headerPanel.setBackground(Color.WHITE);
        
        JLabel titleLabel = new JLabel("C√†i ƒê·∫∑t H·ªá Th·ªëng");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        headerPanel.add(titleLabel, BorderLayout.WEST);
        
        // Settings content
        JPanel settingsPanel = new JPanel();
        settingsPanel.setLayout(new BoxLayout(settingsPanel, BoxLayout.Y_AXIS));
        settingsPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        settingsPanel.setBackground(Color.WHITE);
        
        // User Settings
        JPanel userSettingsPanel = new JPanel(new BorderLayout());
        userSettingsPanel.setBorder(BorderFactory.createTitledBorder("Th√¥ng Tin Ng∆∞·ªùi D√πng"));
        userSettingsPanel.setBackground(Color.WHITE);
        userSettingsPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 150));
        
        JPanel userForm = new JPanel(new GridBagLayout());
        userForm.setBackground(Color.WHITE);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 10, 5, 10);
        gbc.anchor = GridBagConstraints.WEST;
        
        gbc.gridx = 0; gbc.gridy = 0;
        userForm.add(new JLabel("T√™n ng∆∞·ªùi d√πng:"), gbc);
        gbc.gridx = 1;
        JTextField usernameField = new JTextField(currentUser, 15);
        usernameField.setEditable(false);
        userForm.add(usernameField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        userForm.add(new JLabel("Vai tr√≤:"), gbc);
        gbc.gridx = 1;
        JTextField roleField = new JTextField("Qu·∫£n tr·ªã vi√™n", 15);
        roleField.setEditable(false);
        userForm.add(roleField, gbc);
        
        userSettingsPanel.add(userForm, BorderLayout.CENTER);
        
        // System Settings
        JPanel systemSettingsPanel = new JPanel(new BorderLayout());
        systemSettingsPanel.setBorder(BorderFactory.createTitledBorder("C√†i ƒê·∫∑t H·ªá Th·ªëng"));
        systemSettingsPanel.setBackground(Color.WHITE);
        systemSettingsPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 200));
        
        JPanel systemForm = new JPanel(new GridBagLayout());
        systemForm.setBackground(Color.WHITE);
        
        gbc.gridx = 0; gbc.gridy = 0;
        systemForm.add(new JLabel("Ng√¥n ng·ªØ:"), gbc);
        gbc.gridx = 1;
        JComboBox<String> languageCombo = new JComboBox<>(new String[]{"Ti·∫øng Vi·ªát", "English"});
        systemForm.add(languageCombo, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        systemForm.add(new JLabel("Giao di·ªán:"), gbc);
        gbc.gridx = 1;
        JComboBox<String> themeCombo = new JComboBox<>(new String[]{"S√°ng", "T·ªëi"});
        systemForm.add(themeCombo, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        systemForm.add(new JLabel("T·ª± ƒë·ªông l∆∞u:"), gbc);
        gbc.gridx = 1;
        JCheckBox autoSaveCheck = new JCheckBox("B·∫≠t t·ª± ƒë·ªông l∆∞u");
        autoSaveCheck.setBackground(Color.WHITE);
        autoSaveCheck.setSelected(true);
        systemForm.add(autoSaveCheck, gbc);
        
        systemSettingsPanel.add(systemForm, BorderLayout.CENTER);
        
        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.setBackground(Color.WHITE);
        buttonPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 60));
        
        JButton saveSettingsBtn = new JButton("üíæ L∆∞u C√†i ƒê·∫∑t");
        saveSettingsBtn.setBackground(new Color(46, 204, 113));
        saveSettingsBtn.setForeground(Color.WHITE);
        saveSettingsBtn.setBorder(new EmptyBorder(8, 15, 8, 15));
        saveSettingsBtn.setFocusPainted(false);
        saveSettingsBtn.addActionListener(e -> {
            JOptionPane.showMessageDialog(this, "C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
        });
        
        JButton resetBtn = new JButton("üîÑ Kh√¥i Ph·ª•c M·∫∑c ƒê·ªãnh");
        resetBtn.setBackground(new Color(52, 152, 219));
        resetBtn.setForeground(Color.WHITE);
        resetBtn.setBorder(new EmptyBorder(8, 15, 8, 15));
        resetBtn.setFocusPainted(false);
        resetBtn.addActionListener(e -> {
            int result = JOptionPane.showConfirmDialog(this, 
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh?", 
                "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                languageCombo.setSelectedIndex(0);
                themeCombo.setSelectedIndex(0);
                autoSaveCheck.setSelected(true);
                JOptionPane.showMessageDialog(this, "ƒê√£ kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        buttonPanel.add(saveSettingsBtn);
        buttonPanel.add(resetBtn);
        
        settingsPanel.add(userSettingsPanel);
        settingsPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        settingsPanel.add(systemSettingsPanel);
        settingsPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        settingsPanel.add(buttonPanel);
        settingsPanel.add(Box.createVerticalGlue());
        
        panel.add(headerPanel, BorderLayout.NORTH);
        panel.add(settingsPanel, BorderLayout.CENTER);
        
        return panel;
    }
    
    private void refreshHomePanel() {
        // Remove and recreate home panel to refresh statistics
        contentPanel.remove(contentPanel.getComponent(0));
        contentPanel.add(createHomePanel(), "HOME", 0);
        if (contentLayout.toString().contains("HOME")) {
            contentLayout.show(contentPanel, "HOME");
        }
    }
    
    private void setupLayout() {
        setLayout(new BorderLayout());
        add(sidebarPanel, BorderLayout.WEST);
        add(contentPanel, BorderLayout.CENTER);
    }
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeel());
            } catch (Exception e) {
                e.printStackTrace();
            }
            new MainDashboard();
        });
    }
}
